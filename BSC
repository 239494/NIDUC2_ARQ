import random as ran
import copy

fromNormToFail = 0.000000001

true_false = [True, False]

bit_sequence = []

ran.seed


def product_bit_sequence(how_many):
    tmp = []
    for i in range(how_many):
        tmp.append(ran.choice(true_false))
    return tmp


def split_into_packages(source_bit_sequence, packages_amount):
        tmp = []
        splitsize = 1.0 / packages_amount * len(source_bit_sequence)
        for i in range(packages_amount):
            tmp.append(source_bit_sequence[int(round(i * splitsize)):int(round((i + 1) * splitsize))])
        return tmp


def add_noises(bit_package):
    tmp = list(bit_package)
    for i in range(len(tmp)):
        test = ran.random()
        if test>fromNormToFail:
          continue
        else:
            tmp[i] = not tmp[i]
    return tmp


def calculate_even_bit(bit_package):
    tmp = copy.copy(bit_package)
    logical_sum = tmp[0]
    for i in range(1, len(tmp)):
        logical_sum = logical_sum ^ tmp[i]
    if logical_sum:
        tmp.append(False)
        return tmp
    else:
        tmp.append(True)
        return tmp


def check_for_error(bit_package, bit_package_source):
    return bit_package == bit_package_source


def resend_request(bit_package_number, bit_sequence_source):
    tmp = copy.copy(bit_sequence_source[bit_package_number])
    tmp = calculate_even_bit(tmp)
    tmp = add_noises(tmp)
    return tmp


def transmission(information,fragments):
    information = split_into_packages(information, fragments)
    source = copy.copy(information)
    print(information)
    tmp = []
    for i in range(fragments):
        information[i] = calculate_even_bit(information[i])
        tmp.append(list(information[i]))
    for i in range(fragments):
        information[i] = add_noises(information[i])
        if not check_for_error(information[i], tmp[i]):
            while True:
                retry = resend_request(i, source)
                if check_for_error(retry, tmp[i]):
                    print("Resend request completed successfuly")
                    break
                else:
                    print("Resend request failed, resending new one")
                    continue

        else:
            print("Package sent")
            continue
    print("Transmission finished")



bit_sequence = product_bit_sequence(5000)

# print(bit_sequence)

#
#bit_sequence = split_into_packages(bit_sequence, 5)

#print(bit_sequence)


transmission(bit_sequence,500)

"""bit_sequence = calculate_even_bit(bit_sequence)

print(bit_sequence)

bit_noises = add_noises(bit_sequence)

print(bit_noises)

errors = check_for_error(bit_noises, bit_sequence)

print(errors)"""